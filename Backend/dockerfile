# # Use the official Python image from the Docker Hub
# FROM python:3.11-slim

# # Set the working directory in the container
# WORKDIR /app

# # Set environment variables
# ENV PYTHONDONTWRITEBYTECODE=1 \
#     PYTHONUNBUFFERED=1 \
#     PATH="/opt/venv/bin:$PATH" \
#     FLASK_ENV=production

# # Install system dependencies
# RUN apt-get update && apt-get install -y --no-install-recommends \
#     tesseract-ocr \
#     poppler-utils \
#     libzbar0 \
#     libmagic1 \
#     curl \
#     gcc \
#     python3-dev \
#     libasound2-dev \
#     portaudio19-dev \
#     python3-pyaudio \
#     libportaudio2 \
#     && rm -rf /var/lib/apt/lists/*

# # Create virtual environment
# RUN python -m venv /opt/venv

# # Install Python dependencies
# COPY requirements.txt .
# RUN . /opt/venv/bin/activate && \
#     pip install --upgrade pip && \
#     pip install --no-cache-dir -r requirements.txt

# # Create a non-root user
# RUN groupadd -r appuser && useradd -r -g appuser appuser

# # Set permissions
# RUN chown -R appuser:appuser /opt/venv && \
#     chown -R appuser:appuser /app

# # Switch to non-root user
# USER appuser

# # Copy the rest of the backend code
# COPY --chown=appuser:appuser . .

# # Expose the port
# EXPOSE 5001

# # Health check (assumes /health endpoint; adjust if needed)
# HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
#     CMD curl -f http://localhost:5001/health || exit 1

# # Command to run the application
# CMD ["/opt/venv/bin/gunicorn", "--workers", "4", "--bind", "0.0.0.0:5001", "--timeout", "120", "--access-logfile", "-", "--error-logfile", "-", "--log-level", "info", "app:app"]

# Use Python 3.11 slim as base
# Use Python 3.11 slim as base
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH" \
    FLASK_ENV=production \
    FLASK_APP=app.py

# Install necessary system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    gcc \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Create and activate virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy application code BEFORE switching to non-root user
COPY . .

# Create requirements.txt with exact versions
RUN echo "flask==2.3.3\n\
flask-cors==4.0.0\n\
pymongo==4.5.0\n\
werkzeug==3.0.1\n\
python-dotenv==1.0.0\n\
marshmallow==3.20.1\n\
requests==2.31.0\n\
gevent==24.11.1\n\
gunicorn==21.2.0" > requirements.txt

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser -s /sbin/nologin appuser

# Set permissions for non-root user
RUN chown -R appuser:appuser /opt/venv && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Create necessary directories with correct permissions
RUN mkdir -p /app/logs && \
    chown -R appuser:appuser /app/logs

# Expose port
EXPOSE 5001

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5001/health || exit 1

# Set environment variables for Gunicorn
ENV GUNICORN_WORKERS=4 \
    GUNICORN_TIMEOUT=120

# Start the application with Gunicorn
CMD gunicorn --workers=$GUNICORN_WORKERS --bind=0.0.0.0:5001 --timeout=$GUNICORN_TIMEOUT \
    --access-logfile=- --error-logfile=- --log-level=info --worker-class=gevent app:app
