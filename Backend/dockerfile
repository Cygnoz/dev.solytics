# Use the official Python image from the Docker Hub
FROM python:3.11-slim

# Set the working directory in the container
WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH" \
    FLASK_ENV=production

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    tesseract-ocr \
    poppler-utils \
    libzbar0 \
    libmagic1 \
    curl \
    gcc \
    python3-dev \
    libasound2-dev \
    portaudio19-dev \
    python3-pyaudio \
    libportaudio2 \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment before switching user
RUN python -m venv /opt/venv

# Install pymongo separately first
RUN . /opt/venv/bin/activate && \
    pip install --no-cache-dir pymongo && \
    python -c "import pymongo; print('pymongo version:', pymongo.__version__)"

# Install other Python dependencies
COPY requirements.txt .
RUN . /opt/venv/bin/activate && \
    pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt gunicorn

# Create a non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set permissions after installing dependencies
RUN chown -R appuser:appuser /opt/venv && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Copy the rest of the backend code into the container
COPY --chown=appuser:appuser . .

# Expose the port your application runs on
EXPOSE 5001

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5001/ || exit 1

# Command to run the backend application with Gunicorn
CMD ["/opt/venv/bin/gunicorn", "--workers", "4", "--bind", "0.0.0.0:5001", "--timeout", "120", "--access-logfile", "-", "--error-logfile", "-", "--log-level", "info", "app:app"]
